{"ast":null,"code":"var _jsxFileName = \"/Users/ernest/Desktop/sei-personal/5. projects/project2/src/components/SearchContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Search from \"./Search\";\nimport Results from \"./Results\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchContainer = () => {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [shows, setShows] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false); // ====================================\n  // Fetch shows from API based on query input\n  // ====================================\n\n  const url = \"https://api.tvmaze.com/search/shows?q=\";\n\n  const fetchShow = async () => {\n    const res = await fetch(url + query);\n    const rawData = await res.json();\n    console.log(rawData); // ===============================\n    // Extract name and medium image from fetch result, set a placeholder image for shows without pics (otherwise will show broken image link)\n    // <Reference from source code>\n    //\n    // a5 = 'Cat' && 'Dog'       // t && t returns \"Dog\"\n    // a2 = true && false;       // t && f returns false\n    // o5 = \"Cat\" || \"Dog\";      // t || t returns \"Cat\"\n    // o6 = false || \"Cat\";      // f || t returns \"Cat\"\n    // ===============================\n\n    const filteredData = rawData.map(result => {\n      const {\n        name,\n        image\n      } = result.show;\n      return {\n        name,\n        image: image && image.medium || \"https://cdn.browshot.com/static/images/not-found.png\"\n      };\n    });\n    setShows(filteredData);\n    console.log(shows);\n  }; // ===========================\n  // 3 Functions to:\n  // - handleSearchInput: manage changes to input field\n  // - onSubmitQuery: initiate fetch request\n  // - onSearchAgain: set state back to default (and show page with the search bar)\n  // ===========================\n\n\n  const handleSearchInput = e => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmitQuery = e => {\n    e.preventDefault();\n\n    if (query.length > 0) {\n      fetchShow();\n      setHasSearched(true);\n      setQuery(\"\");\n    }\n  };\n\n  const onSearchAgain = () => {\n    setHasSearched(false);\n    setQuery(\"\");\n  }; // =========================\n  // Return\n  // - Using ternary operator + hasSearched state to display either component\n  // - hasSearched = false -> show page with Search bar / true -> show page with Results + \"back to search\" button)\n  // =========================\n\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"SearchContainer\">\n    _jsxDEV(_Fragment, {\n      children: hasSearched ? /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"cards\",\n        children: /*#__PURE__*/_jsxDEV(Results, {\n          shows: shows,\n          onSearchAgain: onSearchAgain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(Search, {\n        handleSearchInput: handleSearchInput,\n        onSubmitQuery: onSubmitQuery,\n        query: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)\n  );\n};\n\n_s(SearchContainer, \"ULtpnr+09YSd3SotcHy5OE4iM9M=\");\n\n_c = SearchContainer;\nexport default SearchContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchContainer\");","map":{"version":3,"sources":["/Users/ernest/Desktop/sei-personal/5. projects/project2/src/components/SearchContainer.js"],"names":["React","useState","Search","Results","SearchContainer","query","setQuery","shows","setShows","hasSearched","setHasSearched","url","fetchShow","res","fetch","rawData","json","console","log","filteredData","map","result","name","image","show","medium","handleSearchInput","e","target","value","onSubmitQuery","preventDefault","length","onSearchAgain"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C,CAH4B,CAK5B;AACA;AACA;;AAEA,QAAMU,GAAG,GAAG,wCAAZ;;AAEA,QAAMC,SAAS,GAAG,YAAY;AAC5B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,GAAGN,KAAP,CAAvB;AACA,UAAMU,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAH4B,CAK5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMI,YAAY,GAAGJ,OAAO,CAACK,GAAR,CAAaC,MAAD,IAAY;AAC3C,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBF,MAAM,CAACG,IAA/B;AACA,aAAO;AACLF,QAAAA,IADK;AAELC,QAAAA,KAAK,EACFA,KAAK,IAAIA,KAAK,CAACE,MAAhB,IACA;AAJG,OAAP;AAMD,KARoB,CAArB;AAUAjB,IAAAA,QAAQ,CAACW,YAAD,CAAR;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACD,GA3BD,CAX4B,CAwC5B;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMmB,iBAAiB,GAAIC,CAAD,IAAO;AAC/BrB,IAAAA,QAAQ,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAIH,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACI,cAAF;;AACA,QAAI1B,KAAK,CAAC2B,MAAN,GAAe,CAAnB,EAAsB;AACpBpB,MAAAA,SAAS;AACTF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAJ,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,GAPD;;AASA,QAAM2B,aAAa,GAAG,MAAM;AAC1BvB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAHD,CA5D4B,CAiE5B;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACE;AACA;AAAA,gBACGG,WAAW,gBACV;AAAS,QAAA,SAAS,EAAC,OAAnB;AAAA,+BACE,QAAC,OAAD;AAAS,UAAA,KAAK,EAAEF,KAAhB;AAAuB,UAAA,aAAa,EAAE0B;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADU,gBAKV,QAAC,MAAD;AACE,QAAA,iBAAiB,EAAEP,iBADrB;AAEE,QAAA,aAAa,EAAEI,aAFjB;AAGE,QAAA,KAAK,EAAEzB;AAHT;AAAA;AAAA;AAAA;AAAA;AANJ;AAFF;AAiBD,CAxFD;;GAAMD,e;;KAAAA,e;AA0FN,eAAeA,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Search from \"./Search\";\nimport Results from \"./Results\";\n\nconst SearchContainer = () => {\n  const [query, setQuery] = useState(\"\");\n  const [shows, setShows] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);\n\n  // ====================================\n  // Fetch shows from API based on query input\n  // ====================================\n\n  const url = \"https://api.tvmaze.com/search/shows?q=\";\n\n  const fetchShow = async () => {\n    const res = await fetch(url + query);\n    const rawData = await res.json();\n    console.log(rawData);\n\n    // ===============================\n    // Extract name and medium image from fetch result, set a placeholder image for shows without pics (otherwise will show broken image link)\n    // <Reference from source code>\n    //\n    // a5 = 'Cat' && 'Dog'       // t && t returns \"Dog\"\n    // a2 = true && false;       // t && f returns false\n    // o5 = \"Cat\" || \"Dog\";      // t || t returns \"Cat\"\n    // o6 = false || \"Cat\";      // f || t returns \"Cat\"\n    // ===============================\n\n    const filteredData = rawData.map((result) => {\n      const { name, image } = result.show;\n      return {\n        name,\n        image:\n          (image && image.medium) ||\n          \"https://cdn.browshot.com/static/images/not-found.png\",\n      };\n    });\n\n    setShows(filteredData);\n    console.log(shows);\n  };\n\n  // ===========================\n  // 3 Functions to:\n  // - handleSearchInput: manage changes to input field\n  // - onSubmitQuery: initiate fetch request\n  // - onSearchAgain: set state back to default (and show page with the search bar)\n  // ===========================\n\n  const handleSearchInput = (e) => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmitQuery = (e) => {\n    e.preventDefault();\n    if (query.length > 0) {\n      fetchShow();\n      setHasSearched(true);\n      setQuery(\"\");\n    }\n  };\n\n  const onSearchAgain = () => {\n    setHasSearched(false);\n    setQuery(\"\");\n  };\n\n  // =========================\n  // Return\n  // - Using ternary operator + hasSearched state to display either component\n  // - hasSearched = false -> show page with Search bar / true -> show page with Results + \"back to search\" button)\n  // =========================\n\n  return (\n    // <div className=\"SearchContainer\">\n    <>\n      {hasSearched ? (\n        <section className=\"cards\">\n          <Results shows={shows} onSearchAgain={onSearchAgain} />\n        </section>\n      ) : (\n        <Search\n          handleSearchInput={handleSearchInput}\n          onSubmitQuery={onSubmitQuery}\n          query={query}\n        />\n      )}\n      {/* </div> */}\n    </>\n  );\n};\n\nexport default SearchContainer;\n"]},"metadata":{},"sourceType":"module"}