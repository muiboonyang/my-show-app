{"ast":null,"code":"var _jsxFileName = \"/Users/ernest/Desktop/sei-personal/5. projects/project2/src/pages/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Search from \"./components/Search\";\nimport Results from \"./components/Results\";\nimport LoadingSpinner from \"./components/LoadingSpinner\";\nimport FavContext from \"./context/fav-context\";\nimport Favourites from \"./pages/Favourites\"; // import FavList from \"./components/FavList\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchContainer = () => {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [shows, setShows] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favourites, setFavourites] = useState([]); // ===========================\n  // Favourite List\n  // ===========================\n  // Code to add shows to Favourite List\n  // Set: collection of unique values (no duplicates)\n  // Filter data to remove undefined elements\n  // ===========================\n\n  const addFavourite = e => {\n    setFavourites(prevState => {\n      const newShow = document.getElementById(e.target.id);\n      prevState.push(newShow.src);\n      const deduped = Array.from(new Set(prevState));\n      let data = deduped.filter(function (element) {\n        return element !== undefined;\n      });\n      console.log(data);\n      return data;\n    });\n  }; // Code to remove shows from Favourite List\n  // gets image's ID based on clicked image -> use splice to remove it from Favourite List\n\n\n  const removeFavourite = e => {\n    setFavourites(prevState => {\n      const targetParentId = e.target.parentElement.id;\n      prevState.splice(targetParentId, 1); // const deduped = Array.from(new Set(prevState));\n      // let data = deduped.filter(function (element) {\n      //   return element !== undefined;\n      // });\n      // console.log(data);\n\n      const data = prevState.map(x => {\n        return x;\n      });\n      return data;\n    });\n  }; // ====================================\n  // Fetch shows from API based on query input\n  // ====================================\n\n\n  const url = \"https://api.tvmaze.com/search/shows?q=\";\n\n  const fetchShow = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const res = await fetch(url + query);\n      const rawData = await res.json();\n      console.log(rawData); // ===============================\n      // Extract name and medium image from fetch result\n      // - set a placeholder image for shows without pics (otherwise will show broken image link)\n      // - removes HTML element tags from show description\n      //\n      // a5 = 'Cat' && 'Dog'       // t && t returns \"Dog\"\n      // a2 = true && false;       // t && f returns false\n      // o5 = \"Cat\" || \"Dog\";      // t || t returns \"Cat\"\n      // o6 = false || \"Cat\";      // f || t returns \"Cat\"\n      // ===============================\n\n      const filteredData = rawData.map(result => {\n        let {\n          name,\n          image,\n          officialSite,\n          url,\n          summary\n        } = result.show;\n        return {\n          title: name,\n          image: image && image.medium || \"https://i.imgur.com/V8olf7q.png\",\n          site: officialSite || url,\n          synopsis: (summary || \"Coming soon!\").replace(/<\\/?[^>]+>/gi, \"\")\n        };\n      });\n      setShows(filteredData);\n      console.log(shows);\n    } catch (err) {\n      setError(err.message);\n    }\n\n    setIsLoading(false);\n  }; // ===========================\n  // 2 Functions to:\n  // - handleSearchInput: manage changes to input field\n  // - onSubmitQuery: initiate fetch request\n  // ===========================\n\n\n  const handleSearchInput = e => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmitQuery = e => {\n    e.preventDefault();\n\n    if (query.length > 0) {\n      fetchShow();\n      setHasSearched(true); //   setQuery(\"\");\n    }\n  }; // ===========================\n  // Image, Error, or Loading check\n  // ===========================\n\n\n  let content = \"\";\n\n  if (shows) {\n    content = /*#__PURE__*/_jsxDEV(Results, {\n      shows: shows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  } // =========================\n  // Return\n  // - Using ternary operator + hasSearched state to display either component\n  // - hasSearched = false -> show page with Search bar / true -> show page with Results + \"back to search\" button)\n  // =========================\n\n\n  return /*#__PURE__*/_jsxDEV(FavContext.Provider, {\n    value: {\n      favourites,\n      setFavourites,\n      addFavourite,\n      removeFavourite\n    },\n    children: [/*#__PURE__*/_jsxDEV(Favourites, {\n      favourites: favourites,\n      removeFavourite: removeFavourite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SearchContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        handleSearchInput: handleSearchInput,\n        onSubmitQuery: onSubmitQuery,\n        query: query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), hasSearched ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), content]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchContainer, \"Tv+RLrucpL8Pr9C7HCzHLfeLD0E=\");\n\n_c = SearchContainer;\nexport default SearchContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchContainer\");","map":{"version":3,"sources":["/Users/ernest/Desktop/sei-personal/5. projects/project2/src/pages/Search.js"],"names":["React","useState","Search","Results","LoadingSpinner","FavContext","Favourites","SearchContainer","query","setQuery","shows","setShows","hasSearched","setHasSearched","isLoading","setIsLoading","error","setError","favourites","setFavourites","addFavourite","e","prevState","newShow","document","getElementById","target","id","push","src","deduped","Array","from","Set","data","filter","element","undefined","console","log","removeFavourite","targetParentId","parentElement","splice","map","x","url","fetchShow","res","fetch","rawData","json","filteredData","result","name","image","officialSite","summary","show","title","medium","site","synopsis","replace","err","message","handleSearchInput","value","onSubmitQuery","preventDefault","length","content"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Search from \"./components/Search\";\nimport Results from \"./components/Results\";\nimport LoadingSpinner from \"./components/LoadingSpinner\";\n\nimport FavContext from \"./context/fav-context\";\nimport Favourites from \"./pages/Favourites\";\n// import FavList from \"./components/FavList\";\n\nconst SearchContainer = () => {\n  const [query, setQuery] = useState(\"\");\n  const [shows, setShows] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [favourites, setFavourites] = useState([]);\n\n  // ===========================\n  // Favourite List\n  // ===========================\n  // Code to add shows to Favourite List\n  // Set: collection of unique values (no duplicates)\n  // Filter data to remove undefined elements\n  // ===========================\n\n  const addFavourite = (e) => {\n    setFavourites((prevState) => {\n      const newShow = document.getElementById(e.target.id);\n      prevState.push(newShow.src);\n\n      const deduped = Array.from(new Set(prevState));\n\n      let data = deduped.filter(function (element) {\n        return element !== undefined;\n      });\n\n      console.log(data);\n      return data;\n    });\n  };\n\n  // Code to remove shows from Favourite List\n  // gets image's ID based on clicked image -> use splice to remove it from Favourite List\n\n  const removeFavourite = (e) => {\n    setFavourites((prevState) => {\n      const targetParentId = e.target.parentElement.id;\n      prevState.splice(targetParentId, 1);\n\n      // const deduped = Array.from(new Set(prevState));\n      // let data = deduped.filter(function (element) {\n      //   return element !== undefined;\n      // });\n\n      // console.log(data);\n\n      const data = prevState.map((x) => {\n        return x;\n      });\n      return data;\n    });\n  };\n  // ====================================\n  // Fetch shows from API based on query input\n  // ====================================\n\n  const url = \"https://api.tvmaze.com/search/shows?q=\";\n\n  const fetchShow = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const res = await fetch(url + query);\n      const rawData = await res.json();\n      console.log(rawData);\n\n      // ===============================\n      // Extract name and medium image from fetch result\n      // - set a placeholder image for shows without pics (otherwise will show broken image link)\n      // - removes HTML element tags from show description\n      //\n      // a5 = 'Cat' && 'Dog'       // t && t returns \"Dog\"\n      // a2 = true && false;       // t && f returns false\n      // o5 = \"Cat\" || \"Dog\";      // t || t returns \"Cat\"\n      // o6 = false || \"Cat\";      // f || t returns \"Cat\"\n      // ===============================\n\n      const filteredData = rawData.map((result) => {\n        let { name, image, officialSite, url, summary } = result.show;\n        return {\n          title: name,\n          image: (image && image.medium) || \"https://i.imgur.com/V8olf7q.png\",\n          site: officialSite || url,\n          synopsis: (summary || \"Coming soon!\").replace(/<\\/?[^>]+>/gi, \"\"),\n        };\n      });\n\n      setShows(filteredData);\n      console.log(shows);\n    } catch (err) {\n      setError(err.message);\n    }\n\n    setIsLoading(false);\n  };\n\n  // ===========================\n  // 2 Functions to:\n  // - handleSearchInput: manage changes to input field\n  // - onSubmitQuery: initiate fetch request\n  // ===========================\n\n  const handleSearchInput = (e) => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmitQuery = (e) => {\n    e.preventDefault();\n    if (query.length > 0) {\n      fetchShow();\n      setHasSearched(true);\n      //   setQuery(\"\");\n    }\n  };\n\n  // ===========================\n  // Image, Error, or Loading check\n  // ===========================\n\n  let content = \"\";\n\n  if (shows) {\n    content = <Results shows={shows} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  // =========================\n  // Return\n  // - Using ternary operator + hasSearched state to display either component\n  // - hasSearched = false -> show page with Search bar / true -> show page with Results + \"back to search\" button)\n  // =========================\n\n  return (\n    <FavContext.Provider\n      value={{ favourites, setFavourites, addFavourite, removeFavourite }}\n    >\n      <Favourites favourites={favourites} removeFavourite={removeFavourite} />\n      <div className=\"SearchContainer\">\n        <Search\n          handleSearchInput={handleSearchInput}\n          onSubmitQuery={onSubmitQuery}\n          query={query}\n        />\n        {hasSearched ? (\n          <>\n            <br />\n            {content}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </FavContext.Provider>\n  );\n};\n\nexport default SearchContainer;\n"]},"metadata":{},"sourceType":"module"}