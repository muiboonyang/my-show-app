{"ast":null,"code":"var _jsxFileName = \"/Users/ernest/Desktop/sei-personal/5. projects/project2/src/components/SearchContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Search from \"./Search\";\nimport Results from \"./Results\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchContainer = () => {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const [shows, setShows] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // ====================================\n  // Fetch shows from API based on query input\n  // ====================================\n\n  const url = \"https://api.tvmaze.com/search/shows?q=\";\n\n  const fetchShow = async () => {\n    const res = await fetch(url + query);\n    const rawData = await res.json();\n    console.log(rawData); // ===============================\n    // Extract name and medium image from fetch result, set a placeholder image for shows without pics (otherwise will show broken image link)\n    // <Reference from source code>\n    //\n    // a5 = 'Cat' && 'Dog'       // t && t returns \"Dog\"\n    // a2 = true && false;       // t && f returns false\n    // o5 = \"Cat\" || \"Dog\";      // t || t returns \"Cat\"\n    // o6 = false || \"Cat\";      // f || t returns \"Cat\"\n    // ===============================\n\n    const filteredData = rawData.map(result => {\n      const {\n        name,\n        image\n      } = result.show;\n      return {\n        name,\n        image: image && image.medium || \"https://cdn.browshot.com/static/images/not-found.png\"\n      };\n    });\n    setShows(filteredData);\n    console.log(shows);\n  }; // ===========================\n  // 3 Functions to:\n  // - handleSearchInput: manage changes to input field\n  // - onSubmitQuery: initiate fetch request\n  // - onSearchAgain: set state back to default (and show page with the search bar)\n  // ===========================\n\n\n  const handleSearchInput = e => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmitQuery = e => {\n    e.preventDefault();\n\n    if (query.length > 0) {\n      fetchShow();\n      setHasSearched(true);\n      setQuery(\"\");\n    }\n  };\n\n  const onSearchAgain = () => {\n    setHasSearched(false);\n    setQuery(\"\");\n  }; // =========================\n  // Return\n  // - Using ternary operator + hasSearched state to display either component\n  // - hasSearched = false -> show page with Search bar / true -> show page with Results + \"back to search\" button)\n  // =========================\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SearchContainer\",\n    children: hasSearched ? /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"cards\",\n      children: /*#__PURE__*/_jsxDEV(Results, {\n        shows: shows,\n        onSearchAgain: onSearchAgain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Search, {\n      handleSearchInput: handleSearchInput,\n      onSubmitQuery: onSubmitQuery,\n      query: query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchContainer, \"M1J7dZHlnIGRpJJ8+nICS5tOY5E=\");\n\n_c = SearchContainer;\nexport default SearchContainer; //========================\n\nconst fetchImage = async () => {\n  setIsLoading(true);\n  setError(null);\n\n  try {\n    const res = await fetch(url + input);\n    const data2 = await res.json();\n    console.log(data2); // Have to use index[0] for this as it's an array\n\n    setImage(data2.data[0].images.fixed_height.url);\n  } catch (err) {\n    setError(err.message);\n  }\n\n  setIsLoading(false);\n}; // ===========================\n// Handlers\n// ===========================\n\n\nconst handleSubmit = e => {\n  e.preventDefault();\n\n  if (input.length > 0) {\n    fetchImage();\n    setInput(\"\");\n  }\n\n  fetchRandom();\n};\n\nconst handleInput = e => {\n  setInput(e.target.value);\n}; // ===========================\n// Image, Error, or Loading check\n// ===========================\n\n\nlet content = \"\";\n\nif (image) {\n  content = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true);\n}\n\nif (error) {\n  content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 13\n  }, this);\n}\n\nif (isLoading) {\n  content = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered\",\n    children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchContainer\");","map":{"version":3,"sources":["/Users/ernest/Desktop/sei-personal/5. projects/project2/src/components/SearchContainer.js"],"names":["React","useState","Search","Results","LoadingSpinner","SearchContainer","query","setQuery","shows","setShows","hasSearched","setHasSearched","isLoading","setIsLoading","error","setError","url","fetchShow","res","fetch","rawData","json","console","log","filteredData","map","result","name","image","show","medium","handleSearchInput","e","target","value","onSubmitQuery","preventDefault","length","onSearchAgain","fetchImage","input","data2","setImage","data","images","fixed_height","err","message","handleSubmit","setInput","fetchRandom","handleInput","content"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Search from \"./Search\";\nimport Results from \"./Results\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst SearchContainer = () => {\n  const [query, setQuery] = useState(\"\");\n  const [shows, setShows] = useState([]);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // ====================================\n  // Fetch shows from API based on query input\n  // ====================================\n\n  const url = \"https://api.tvmaze.com/search/shows?q=\";\n\n  const fetchShow = async () => {\n    const res = await fetch(url + query);\n    const rawData = await res.json();\n    console.log(rawData);\n\n    // ===============================\n    // Extract name and medium image from fetch result, set a placeholder image for shows without pics (otherwise will show broken image link)\n    // <Reference from source code>\n    //\n    // a5 = 'Cat' && 'Dog'       // t && t returns \"Dog\"\n    // a2 = true && false;       // t && f returns false\n    // o5 = \"Cat\" || \"Dog\";      // t || t returns \"Cat\"\n    // o6 = false || \"Cat\";      // f || t returns \"Cat\"\n    // ===============================\n\n    const filteredData = rawData.map((result) => {\n      const { name, image } = result.show;\n      return {\n        name,\n        image:\n          (image && image.medium) ||\n          \"https://cdn.browshot.com/static/images/not-found.png\",\n      };\n    });\n\n    setShows(filteredData);\n    console.log(shows);\n  };\n\n  // ===========================\n  // 3 Functions to:\n  // - handleSearchInput: manage changes to input field\n  // - onSubmitQuery: initiate fetch request\n  // - onSearchAgain: set state back to default (and show page with the search bar)\n  // ===========================\n\n  const handleSearchInput = (e) => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmitQuery = (e) => {\n    e.preventDefault();\n    if (query.length > 0) {\n      fetchShow();\n      setHasSearched(true);\n      setQuery(\"\");\n    }\n  };\n\n  const onSearchAgain = () => {\n    setHasSearched(false);\n    setQuery(\"\");\n  };\n\n  // =========================\n  // Return\n  // - Using ternary operator + hasSearched state to display either component\n  // - hasSearched = false -> show page with Search bar / true -> show page with Results + \"back to search\" button)\n  // =========================\n\n  return (\n    <div className=\"SearchContainer\">\n      {hasSearched ? (\n        <section className=\"cards\">\n          <Results shows={shows} onSearchAgain={onSearchAgain} />\n        </section>\n      ) : (\n        <Search\n          handleSearchInput={handleSearchInput}\n          onSubmitQuery={onSubmitQuery}\n          query={query}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SearchContainer;\n\n//========================\n\nconst fetchImage = async () => {\n  setIsLoading(true);\n  setError(null);\n\n  try {\n    const res = await fetch(url + input);\n    const data2 = await res.json();\n\n    console.log(data2);\n\n    // Have to use index[0] for this as it's an array\n    setImage(data2.data[0].images.fixed_height.url);\n  } catch (err) {\n    setError(err.message);\n  }\n\n  setIsLoading(false);\n};\n\n// ===========================\n// Handlers\n// ===========================\n\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  if (input.length > 0) {\n    fetchImage();\n    setInput(\"\");\n  }\n  fetchRandom();\n};\n\nconst handleInput = (e) => {\n  setInput(e.target.value);\n};\n\n// ===========================\n// Image, Error, or Loading check\n// ===========================\n\nlet content = \"\";\n\nif (image) {\n  content = (\n    <>\n      <img src={image} />;\n    </>\n  );\n}\n\nif (error) {\n  content = <p>{error}</p>;\n}\n\nif (isLoading) {\n  content = (\n    <div className=\"centered\">\n      <LoadingSpinner />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}